use regex_to_nfa::parser_utils::*;
use std::str::FromStr;
use regex::Regex;
use SymbolId;

grammar;

pub Regex: Box<Ast> = {
    <ConsRegex> "|" <Regex> => Box::new(Ast::Or(<>)),
    ConsRegex
};

ConsRegex: Box<Ast> = {
    <SimpleRegex> <ConsRegex> => Box::new(Ast::Cons(<>)),
    SimpleRegex
};

SimpleRegex: Box<Ast> = {
    <SimpleRegex> "*" => Box::new(Ast::Star(<>)),
    <SimpleRegex> "?" => Box::new(Ast::Optional(<>)),
    <reg:SimpleRegex> "{" <s:r"[0-9]*"> "," <e:r"[0-9]*"> "}" => {
        let start = FromStr::from_str(s).unwrap();
        let end = FromStr::from_str(e).unwrap();
        Box::new(Ast::Range(reg, start, end))
    },
    "(" <Regex> ")",
    r"c[0-9]+" => {
        lazy_static! {
            static ref RE: Regex = Regex::new(r"c([0-9]*)").unwrap();
        }
        Box::new(Ast::Terminal(FromStr::from_str(RE.captures(<>).unwrap().get(1).unwrap().as_str()).unwrap()))
    },
    r"[a-z]" => {
        Box::new(Ast::Terminal(<>.as_bytes()[0] as SymbolId - 97))
    }
};
